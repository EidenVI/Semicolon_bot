import discord
from discord.ext import commands
from discord import app_commands
from dotenv import DISCORD_API_KEY as API_KEY
import openai
import asyncio

class SemiGPT(commands.Cog):
    def __init__(self, client: commands.Bot) -> None:
        self.client = client

    # function for making a request
    async def chatgpt_response(self, prompt: str) -> str:
        try:
            client = OpenAI(api_key=API_KEY)
            response = client.chat.completions.create(
                messages=[
                    {"role": "user", "content": prompt}
                ],
                model="gpt-3.5-turbo"
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"Error during OpenAI API request: {e}")
            return "An error occurred while contacting the AI."

# adding context menu
async def respond_with_chatgpt(interaction: discord.Interaction, message: discord.Message):
    await interaction.response.defer()  

    # receiviing the result
    try:
        print(f"Sending message to OpenAI: {message.content}")
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            messages=[
                {"role": "user", "content": message.content}
            ],
            model="gpt-3.5-turbo"
        )
        reply = response.choices[0].message.content.strip()
        print(f"Received response from OpenAI: {reply}")
    except Exception as e:
        print(f"Error during OpenAI API request: {e}")
        reply = "An error occurred while contacting the AI."

    await interaction.followup.send(content=f'Response: {reply}', ephemeral=True)